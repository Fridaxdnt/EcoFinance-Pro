import streamlit as st
import pandas as pd
import sqlite3
import plotly.express as px
from datetime import datetime

# Configuraci√≥n de p√°gina avanzada
st.set_page_config(
    page_title="EcoFinance Pro",
    page_icon="‚õèÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Estilo CSS personalizado
st.markdown("""
<style>
    .stApp {
        background-color: #0E1117;
        color: white;
    }
    .ia-response {
        background-color: #1E1E1E !important;
        color: white !important;
        padding: 15px;
        border-radius: 10px;
        border-left: 4px solid #2ecc71;
    }
    .header {
        color: #2ecc71;
    }
</style>
""", unsafe_allow_html=True)

# Base de datos
conn = sqlite3.connect('cerro_verde.db')
cursor = conn.cursor()

# Tabla mejorada para miner√≠a
cursor.execute('''
CREATE TABLE IF NOT EXISTS operaciones_mineras (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    fecha DATE,
    proceso TEXT,
    material TEXT,
    agua_m3 FLOAT,
    energia_kwh FLOAT,
    co2_ton FLOAT,
    residuos_ton FLOAT,
    produccion_ton FLOAT,
    ingresos_soles FLOAT,
    gastos_soles FLOAT,
    inversion_ambiental_soles FLOAT
)
''')
conn.commit()

# Datos legales de Per√∫ (precargados)
normas_peru = {
    "Ley General del Ambiente": "Ley N¬∞ 28611",
    "L√≠mite CO‚ÇÇ Miner√≠a": "50 ton/d√≠a (DS N¬∞ 003-2014-MINAM)",
    "Agua": "L√≠mite 5000 m3/d√≠a (Ley de Recursos H√≠dricos)",
    "Multas": "Hasta 10,000 UIT por incumplimiento"
}

# IA Mejorada con conocimiento peruano
def consulta_ia(pregunta, df):
    conocimiento_peru = """
    Contexto Legal Per√∫:
    - Regulaci√≥n: OEFA supervisa cumplimiento ambiental
    - Impuestos: Beneficios tributarios por inversi√≥n ambiental (Ley 30215)
    - Requisitos: EIA aprobado para operar (DS N¬∞ 019-2009-MINAM)
    """
    
    analisis = ""
    if "agua" in pregunta.lower():
        eficiencia = df.groupby('proceso').apply(
            lambda x: x['produccion_ton'].sum()/x['agua_m3'].sum()
        ).sort_values(ascending=False)
        mejor_proceso = eficiencia.idxmax
        analisis = f"""
        üîç An√°lisis de Eficiencia H√≠drica:
        - Proceso m√°s eficiente: {mejor_proceso} ({eficiencia.max():.2f} ton/m3)
        - Recomendaci√≥n: Implementar sistema de recirculaci√≥n (Inversi√≥n: $1.2M, ROI: 3 a√±os)
        - Normativa Per√∫: L√≠mite {normas_peru['Agua']} - Cerro Verde usa {df['agua_m3'].sum()/30:.0f} m3/d√≠a
        """
    
    elif "emision" in pregunta.lower():
        analisis = f"""
        üìâ An√°lisis de Emisiones:
        - Total CO‚ÇÇ: {df['co2_ton'].sum():.1f} ton/mes
        - Proceso clave: {df.groupby('proceso')['co2_ton'].sum().idxmax()}
        - Cumplimiento: {'‚úÖ' if df['co2_ton'].sum()/30 < 50 else '‚ùå'} vs {normas_peru['L√≠mite CO‚ÇÇ Miner√≠a']}
        """
    
    return f"""
    <div class='ia-response'>
        <h3 class='header'>üîé Respuesta IA - Especializada en Miner√≠a Per√∫</h3>
        <p><strong>Consulta:</strong> {pregunta}</p>
        {analisis}
        <hr>
        <h4 class='header'>üìö Base Legal Per√∫:</h4>
        <ul>
            <li>{normas_peru['Ley General del Ambiente']}</li>
            <li>L√≠mites: {normas_peru['L√≠mite CO‚ÇÇ Miner√≠a']}</li>
            <li>Multas: {normas_peru['Multas']}</li>
        </ul>
    </div>
    """

# Interfaz
st.title("‚õèÔ∏è EcoFinance Pro")
st.markdown("**Herramienta contable**")

tab1, tab2, tab3, tab4, tab5 = st.tabs(["üì• Datos", "üìä Visualizaci√≥n", "ü§ñ IA Chat", "üìà Simulaci√≥n", "üìë Reporte"])

# Pesta√±a 1: Ingreso de datos
with tab1:
    with st.form("form_mineria"):
        cols = st.columns(3)
        with cols[0]:
            fecha = st.date_input("Fecha")
            proceso = st.selectbox("Proceso", ["Extracci√≥n", "Procesamiento", "Transporte", "Relaves"])
        with cols[1]:
            agua = st.number_input("Agua (m3)", min_value=0.0)
            energia = st.number_input("Energ√≠a (kWh)", min_value=0.0)
        with cols[2]:
            co2 = st.number_input("CO‚ÇÇ (ton)", min_value=0.0)
            produccion = st.number_input("Producci√≥n (ton)", min_value=0.0)
        
        if st.form_submit_button("üíæ Guardar Datos"):
            cursor.execute('''
                INSERT INTO operaciones_mineras 
                VALUES (NULL, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                fecha, proceso, "Cobre", agua, energia, co2, 0, produccion, 
                produccion*5000, produccion*3500, co2*40
            ))
            conn.commit()
            st.success("Datos mineros guardados")

# Pesta√±a 3: IA Chat
with tab3:
    st.markdown("### üß† Asesor IA")
    pregunta = st.text_input("Escriba su pregunta t√©cnica/legal y presione Enter:", key="ia_input")
    
    if pregunta:
        df = pd.read_sql("SELECT * FROM operaciones_mineras", conn)
        st.markdown(consulta_ia(pregunta, df), unsafe_allow_html=True)

# Pesta√±a 4: Simulaci√≥n
with tab4:
    st.markdown("### üí° Simulador de Inversiones Sostenibles")
    
    with st.expander("‚öôÔ∏è Configurar Escenario"):
        cols = st.columns(2)
        with cols[0]:
            inversion = st.number_input("Inversi√≥n (S/.)", min_value=0, value=1000000)
            plazo = st.slider("Plazo (a√±os)", 1, 10, 5)
        with cols[1]:
            tipo = st.selectbox("Tecnolog√≠a", [
                "Filtros CO‚ÇÇ", "Recirculaci√≥n Agua", 
                "Energ√≠a Solar", "Gesti√≥n de Relaves"
            ])
    
    if st.button("üîÑ Simular Impacto"):
        resultados = {
            "Reducci√≥n CO‚ÇÇ": "15-25%",
            "Ahorro Anual": f"S/. {inversion*0.2:,.0f}",
            "ROI": f"{plazo} a√±os",
            "Cumplimiento Legal": "‚úÖ 100%"
        }
        
        st.markdown("### üìä Resultados de Simulaci√≥n")
        st.table(pd.DataFrame.from_dict(resultados, orient='index', columns=['Valor']))

# Pesta√±a 5: Reportes
with tab5:
    st.markdown("### üìë Reporte Ejecutivo Automatizado")
    
    if st.button("üñ®Ô∏è Generar Reporte"):
        df = pd.read_sql("SELECT * FROM operaciones_mineras", conn)
        
        st.markdown(f"""
        ## An√°lisis Integral - {datetime.now().strftime('%B %Y')}
        
        **üìå Hallazgos Clave:**
        - Producci√≥n total: {df['produccion_ton'].sum():,.0f} ton
        - Intensidad h√≠drica: {df['agua_m3'].sum()/df['produccion_ton'].sum():.1f} m3/ton
        - Emisiones por S/. ingresado: {df['co2_ton'].sum()/df['ingresos_soles'].sum():.4f} ton/S/.
        
        **üìà Tendencia Ambiental:**
        La eficiencia energ√©tica ha {'mejorado' if df['energia_kwh'].mean() < 100 else 'empeorado'} en 
        comparaci√≥n con el trimestre anterior.
        
        **‚öñÔ∏è Cumplimiento Legal:**
        - Niveles de CO‚ÇÇ: {'Dentro' if df['co2_ton'].mean() < 1.5 else 'Fuera'} de l√≠mites legales
        - Agua utilizada: {df['agua_m3'].sum()/30:,.0f} m3/d√≠a vs L√≠mite {normas_peru['Agua']}
        """)
        
        fig = px.bar(df, x='proceso', y='co2_ton', title="Emisiones por Proceso")
        st.plotly_chart(fig)

conn.close()